#include <bits/stdc++.h>
using namespace std;

using pii = pair<int, int>;
using ll = long long;

// Merge sort

// Function to merge two sorted subarrays of arr[]
// arr[low..mid] and arr[mid+1..high] into a temporary array
void merge(vector<int>& arr, int low, int mid, int high) {
    vector<int> temp; // Temporary array to store merged elements
    int left = low, right = mid + 1;

    // Merge elements from left and right subarrays into temp
    while (left <= mid && right <= high) {
        if (arr[left] <= arr[right]) {
            temp.push_back(arr[left]);
            left++;
        } else {
            temp.push_back(arr[right]);
            right++;
        }
    }

    // Copy remaining elements from left subarray (if any)
    while (left <= mid) {
        temp.push_back(arr[left]);
        left++;
    }

    // Copy remaining elements from right subarray (if any)
    while (right <= high) {
        temp.push_back(arr[right]);
        right++;
    }

    // Copy merged elements back to original array
    for (int i = low; i <= high; i++) {
        arr[i] = temp[i - low];
    }
}

// Recursive function to sort an array using merge sort
void merge_sort(vector<int>& arr, int low, int high) {
    if (low >= high) {
        return; // Base case: array of size 1 is already sorted
    }

    int mid = (low + high) / 2; // Divide array into two halves

    // Recursively sort left and right halves
    merge_sort(arr, low, mid);
    merge_sort(arr, mid + 1, high);

    // Merge the sorted halves
    merge(arr, low, mid, high);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    int n;
    cin >> n;
    vector<int> v(n);

    for (auto& x : v) {
        cin >> x;
    }

    merge_sort(v, 0, n - 1);

    for (auto x : v) {
        cout << x << " ";
    }

    return 0;
}
