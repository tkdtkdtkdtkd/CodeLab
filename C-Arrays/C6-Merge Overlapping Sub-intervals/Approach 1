/*

Problem Statement: Given an array of intervals, merge all the overlapping intervals and return an array of non-overlapping intervals.

Sort intervals -> Select interval i -> Skip to next iteration if it has already been merged -> For interval j from i+1 to n-1 -> Merge if j.start <= i.end, update i.end as max of both -> Break if j.start > i.end -> Return answer list

*/

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        // Sort intervals by start time
        int n = intervals.size();
        sort(intervals.begin(), intervals.end());

        // Initialize answer vector
        vector<vector<int>> ans;

        // Iterate through intervals
        for (int i = 0; i < n; i++) {
            int start = intervals[i][0], end = intervals[i][1];

            // If answer is not empty and current interval overlaps with last interval, skip
            if (!ans.empty() && end <= ans.back()[1]) continue;

            // Merge overlapping intervals
            for (int j = i + 1; j < n; j++) {
                if (intervals[j][0] <= end) {
                    end = max(end, intervals[j][1]); // Update end of merged interval
                } else {
                    break; // No more overlaps
                }
            }

            // Add merged interval to answer
            ans.push_back({start, end});
        }

        return ans;
    }
};
