/*

Problem Statement: You are given an array of ‘N’ integers. You need to find the length of the longest sequence which contains the consecutive elements.

Create unordered set from vector -> for each x in set: if (x-1) not in set then (count = 1; while (x+1) in set: count++; x++ -> longest = max(longest, count))

*/

int longestSuccessiveElements(vector<int>& a) {
    int n = a.size();
    if (n == 0) return 0; // If the array is empty, return 0.

    int longest = 1; // Initialize the longest sequence length to 1.
    unordered_set<int> st;
    
    // Put all the array elements into the set:
    for (int i = 0; i < n; i++) {
        st.insert(a[i]);
    }

    // Find the longest sequence:
    for (auto it : st) {
        // Check if 'it' is the starting number of a sequence:
        if (st.find(it - 1) == st.end()) {
            // If 'it - 1' is not in the set, 'it' is the start of a sequence.
            int cnt = 1; // Initialize the current sequence length to 1.
            int x = it; // Set 'x' to the current starting number.
            // Find consecutive numbers in the sequence:
            while (st.find(x + 1) != st.end()) {
                x = x + 1; // Move to the next number in the sequence.
                cnt = cnt + 1; // Increment the current sequence length.
            }
            longest = max(longest, cnt); // Update the longest sequence length if the current sequence is longer.
        }
    }
    return longest; // Return the length of the longest consecutive sequence.
}
