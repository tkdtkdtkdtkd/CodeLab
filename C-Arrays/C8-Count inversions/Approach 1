/*

Problem Statement: Given an array of N integers, count the inversion of the array (using merge-sort).

Use merge sort -> modify merge() -> add count increment (a[left] > a[right]) -> return count from merge() -> maintain a total count in mergeSort() -> add counts from left, right, and merge -> return total count from mergeSort() 

*/

public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    long long mergeSort(long long arr[], int low, int high) {
        long long ct = 0; // Initialize inversion count for this subarray
        if (low < high) {
            int mid = (low + high) / 2;
            // Recursively count inversions in left and right subarrays
            ct += mergeSort(arr, low, mid);
            ct += mergeSort(arr, mid + 1, high);
            // Count inversions while merging
            ct += merge(arr, low, mid, high);
        }
        return ct;
    }

    long long merge(long long arr[], int low, int mid, int high) {
        vector<long long> temp; // Temporary array for merging
        long long ct = 0; // Initialize inversion count for this merge
        int left = low, right = mid + 1;

        // Merge the two sorted halves while counting inversions
        while (left <= mid && right <= high) {
            if (arr[left] <= arr[right]) {
                temp.push_back(arr[left]);
                left++;
            } else {
                temp.push_back(arr[right]);
                right++;
                ct += mid - left + 1; // Count inversions
            }
        }

        // Copy remaining elements from left half if any
        while (left <= mid) {
            temp.push_back(arr[left]);
            left++;
        }

        // Copy remaining elements from right half if any
        while (right <= high) {
            temp.push_back(arr[right]);
            right++;
        }

        // Copy merged elements back to original array
        for (int i = low; i <= high; i++) {
            arr[i] = temp[i - low];
        }

        return ct;
    }

    long long int inversionCount(long long arr[], int n) {
        // Your Code Here
        return mergeSort(arr, 0, n - 1);
    }
