/*

Problem Statement: You are given a read-only array of N integers with values also in the range [1, N] both inclusive. Each integer appears exactly once except A which appears twice and B which is missing. The task is to find the repeating and missing numbers A and B where A repeats twice and B is missing.

Instead of counting occurrences, use hashing to store frequencies of elements 1 to N -> Element with frequency 2 is repeating, element with frequency 0 is missing -> Use a hash array -> Create hash array of size N+1 -> Iterate through array, incrementing hash[a[i]] -> Iterate through hash array, return elements with frequencies 2 and 0 

*/

vector<int> findTwoElement(vector<int> arr, int n) {
    // Create a hash array to store the frequency of each element
    int hash[n+1] = {0};

    // Iterate through the array and update the frequency count in the hash array
    for (auto ele : arr) {
        hash[ele]++;
    }

    // Initialize variables to store the repeating and missing numbers
    int repeating = 0, missing = 0;

    // Iterate through the hash array to find the repeating and missing numbers
    for (int i = 0; i < n+1; i++) {
        if (hash[i] == 2) {
            repeating = i; // Element with frequency 2 is the repeating number
        } else if (hash[i] == 0) {
            missing = i; // Element with frequency 0 is the missing number
        }
        if (repeating && missing) {
            break; // Both repeating and missing numbers found, so break the loop
        }
    }

    return {repeating, missing}; // Return the repeating and missing numbers
}
